---
swagger: "2.0"
info:
  description: "Official & Core API for ADT\n\n[ADT](http://adtcore.io)  Main API\n"
  version: "1.0.0"
  title: "ADT API"
  contact: {}
# the domain of the service
host: adt-core.io
# array of all schemes that your API supports
schemes:
  - http
# will be prefixed to all paths
basePath: /api
produces:
  - application/json
security:
- adt_auth: []
paths:
  /stock:
    get:
      summary: "fetches a list of Stock Items at a facility"
      description: ""
      parameters:
      - name: "limit"
        in: "query"
        description: "Number of Stock Items to fetch"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Drug"
        400:
          description: "Invalid status value"
    post:
      summary: "Add a new Drugs to the facility"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Drug"
      responses:
        201:
          description: "Drug Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Drug"
        405:
          description: "Invalid input"
  /stock/{stockId}/bincard:
    get:
      summary: "Fetch all details of a commodity specified by stockId"
      description: "Returns the dose for a commodity specified by stockId"
      produces:
      - "application/json"
      parameters:
      - name: "stockId"
        in: "path"
        description: "ID of commodity whose details needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BinCard"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Commodity not found"
  /cdrr:
    get:
      summary: "Facility Consumption Data Report And Request"
      description: ""
      parameters:
      - name: "limit"
        in: "query"
        description: "Number of CDRR's to fetch"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Cdrr"
        400:
          description: "Invalid value"
    post:
      summary: "Add a new CDRR to the facility"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Cdrr"
      responses:
        201:
          description: "CDRR Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Cdrr"
        405:
          description: "Invalid input"
  /cdrr/{cdrrId}:
    get:
      summary: "Fetch all CDRR details specified by cdrrId"
      description: "Returns CDRR specified by cdrrId"
      produces:
      - "application/json"
      parameters:
      - name: "cdrrId"
        in: "path"
        description: "ID of commodity whose details needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Cdrr"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Commodity not found"
    put:
      summary: "Update an existing CDRR specified by cdrrId"
      description: ""
      parameters:
      - name: "cdrrId"
        in: "path"
        description: "Particular CDRR specified by cdrrId"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Cdrr"
      responses:
        202:
          description: "Update Accepted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "CDRR not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Deletes the CDRR specified by cdrrId"
      description: ""
      parameters:
      - name: "cdrrId"
        in: "path"
        description: "Particular CDRR specified by cdrrId"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        204:
          description: "CDRR deleted"
        400:
          description: "Invalid CDRR value"
  /cdrr/{cdrrId}/cdrritem:
    get:
      summary: "Fetch all CdrrItems for CDRR specified by cdrrId"
      description: "Returns CdrrItems for CDRR specified by cdrrId"
      produces:
      - "application/json"
      parameters:
      - name: "cdrrId"
        in: "path"
        description: "ID of CDRR whose whose CdrrItem needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CdrrItem"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Commodity not found"
    post:
      summary: "Add a new cdrr item item to a CDRR"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "cdrrId"
        in: "path"
        description: "ID of CDRR whose CdrrItem you are creating"
        required: true
        type: "integer"
        format: "int64"      
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CdrrItem"
      responses:
        201:
          description: "CDRR Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Cdrr"
        405:
          description: "Invalid input"
  /cdrr/{cdrrId}/cdrritem/{cdrritemId}:
    get:
      summary: "Fetch particular CdrrItem specified by cdrritemId belonging to CDRR specified by cdrrId"
      description: "Returns CdrrItem specified by cdrrId"
      produces:
      - "application/json"
      parameters:
      - name: "cdrrId"
        in: "path"
        description: "ID of  CdrrItem whose details needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "cdrritemId"
        in: "path"
        description: "ID of CdrrItem whose details needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CdrrItem"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Commodity not found"
    put:
      summary: "Update an existingCdrrItem specified by cdrritemId belonging to CDRR specified by cdrrId"
      description: ""
      parameters:
      - name: "cdrrId"
        in: "path"
        description: "Particular CDRR specified by cdrrId"
        required: true
        type: "integer"
        format: "int64"
      - name: "cdrritemId"
        in: "path"
        description: "ID of cdrritem whose details needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CdrrItem"
      responses:
        202:
          description: "Update Accepted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "CdrrItem not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Deletes the CdrrItem specified by cdrritemId belonging to CDRR specified by cdrrId"
      description: ""
      parameters:
      - name: "cdrrId"
        in: "path"
        description: "Particular CDRR specified by cdrrId"
        required: true
        type: "integer"
        format: "int64"
      - name: "cdrritemId"
        in: "path"
        description: "ID of cdrritem whose details needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        204:
          description: "CDRR deleted"
        400:
          description: "Invalid cdrritem value"
  /maps:
    get:
      summary: "Facility Consumption Data Report And Request"
      description: ""
      parameters:
      - name: "limit"
        in: "query"
        description: "Number of maps's to fetch"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Maps"
        400:
          description: "Invalid value"
    post:
      summary: "Add a new maps to the facility"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Maps"
      responses:
        201:
          description: "maps Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Maps"
        405:
          description: "Invalid input"
  /maps/{mapsId}:
    get:
      summary: "Fetch all maps details specified by mapsId"
      description: "Returns maps specified by mapsId"
      produces:
      - "application/json"
      parameters:
      - name: "mapsId"
        in: "path"
        description: "ID of commodity whose details needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Maps"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Commodity not found"
    put:
      summary: "Update an existing maps specified by mapsId"
      description: ""
      parameters:
      - name: "mapsId"
        in: "path"
        description: "Particular maps specified by mapsId"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Maps"
      responses:
        202:
          description: "Update Accepted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "maps not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Deletes the maps specified by mapsId"
      description: ""
      parameters:
      - name: "mapsId"
        in: "path"
        description: "Particular maps specified by mapsId"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        204:
          description: "maps deleted"
        400:
          description: "Invalid maps value"
  /maps/{mapsId}/mapsitem:
    get:
      summary: "Fetch all mapsItems for maps specified by mapsId"
      description: "Returns mapsItems for maps specified by mapsId"
      produces:
      - "application/json"
      parameters:
      - name: "mapsId"
        in: "path"
        description: "ID of maps whose whose mapsItem needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MapsItem"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Commodity not found"
    post:
      summary: "Add a new maps item item to a maps"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "mapsId"
        in: "path"
        description: "ID of maps whose mapsItem you are creating"
        required: true
        type: "integer"
        format: "int64"      
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/MapsItem"
      responses:
        201:
          description: "maps Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Maps"
        405:
          description: "Invalid input"
  /maps/{mapsId}/mapsitem/{mapsitemId}:
    get:
      summary: "Fetch particular mapsItem specified by mapsitemId belonging to maps specified by mapsId"
      description: "Returns mapsItem specified by mapsId"
      produces:
      - "application/json"
      parameters:
      - name: "mapsId"
        in: "path"
        description: "ID of  mapsItem whose details needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "mapsitemId"
        in: "path"
        description: "ID of mapsItem whose details needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/MapsItem"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Commodity not found"
    put:
      summary: "Update an existingmapsItem specified by mapsitemId belonging to maps specified by mapsId"
      description: ""
      parameters:
      - name: "mapsId"
        in: "path"
        description: "Particular maps specified by mapsId"
        required: true
        type: "integer"
        format: "int64"
      - name: "mapsitemId"
        in: "path"
        description: "ID of mapsitem whose details needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/MapsItem"
      responses:
        202:
          description: "Update Accepted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "mapsItem not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Deletes the mapsItem specified by mapsitemId belonging to maps specified by mapsId"
      description: ""
      parameters:
      - name: "mapsId"
        in: "path"
        description: "Particular maps specified by mapsId"
        required: true
        type: "integer"
        format: "int64"
      - name: "mapsitemId"
        in: "path"
        description: "ID of mapsitem whose details needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        204:
          description: "maps deleted"
        400:
          description: "Invalid mapsitem value"
  /maps/{mapsId}/mapslog:
    get:
      summary: "Fetch all mapslogs for maps specified by mapsId"
      description: "Returns mapslogs for maps specified by mapsId"
      produces:
      - "application/json"
      parameters:
      - name: "mapsId"
        in: "path"
        description: "ID of maps whose whose mapslog needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MapsLog"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Commodity not found"
    post:
      summary: "Add a new maps log to a maps"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "mapsId"
        in: "path"
        description: "ID of maps whose mapslog you are creating"
        required: true
        type: "integer"
        format: "int64"      
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/MapsLog"
      responses:
        201:
          description: "maps Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Maps"
        405:
          description: "Invalid input"
  /maps/{mapsId}/mapslog/{mapslogId}:
    get:
      summary: "Fetch particular mapslog specified by mapslogId belonging to maps specified by mapsId"
      description: "Returns mapslog specified by mapsId"
      produces:
      - "application/json"
      parameters:
      - name: "mapsId"
        in: "path"
        description: "ID of  mapslog whose details needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "mapslogId"
        in: "path"
        description: "ID of mapslog whose details needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/MapsLog"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Commodity not found"
    put:
      summary: "Update an existingmapslog specified by mapslogId belonging to maps specified by mapsId"
      description: ""
      parameters:
      - name: "mapsId"
        in: "path"
        description: "Particular maps specified by mapsId"
        required: true
        type: "integer"
        format: "int64"
      - name: "mapslogId"
        in: "path"
        description: "ID of mapslog whose details needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/MapsLog"
      responses:
        202:
          description: "Update Accepted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "mapslog not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Deletes the mapslog specified by mapslogId belonging to maps specified by mapsId"
      description: ""
      parameters:
      - name: "mapsId"
        in: "path"
        description: "Particular maps specified by mapsId"
        required: true
        type: "integer"
        format: "int64"
      - name: "mapslogId"
        in: "path"
        description: "ID of mapslog whose details needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        204:
          description: "maps deleted"
        400:
          description: "Invalid mapslog value"

  /drugs:
    get:
      summary: "fetches a list of drugs at a facility"
      description: ""
      parameters:
      - name: "limit"
        in: "query"
        description: "Number of drugs to fetch"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Drug"
        400:
          description: "Invalid status value"
    post:
      summary: "Add a new drugs to the facility"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Drug"
      responses:
        201:
          description: "Drug Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Drug"
        405:
          description: "Invalid input"
  /drugs/{drugId}:
    get:
      summary: "Find drug by drugId"
      description: "Returns the drug with the specified drugId"
      parameters:
      - name: "drugId"
        in: "path"
        description: "Particular drug specified by the ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Drug"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Drug not found"
    put:
      summary: "Update an existing drug specified by the drugId"
      description: ""
      parameters:
      - name: "drugId"
        in: "path"
        description: "Particular Drugspecified by the ID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Drug"
      responses:
        202:
          description: "Update Accepted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Drug not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Deletes the drug specified by drugId"
      description: ""
      parameters:
      - name: "drugId"
        in: "path"
        description: "Particular Drug at facility specified by the ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        204:
          description: "drug deleted"
        400:
          description: "Invalid drug value"
  /drugs/{drugId}/dose:
    get:
      summary: "Find drug dose for drugId"
      description: "Returns the dose for the drug  with the specified drugId"
      produces:
      - "application/json"
      parameters:
      - name: "drugId"
        in: "path"
        description: "ID of drug whose dose that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DrugDose"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Doses not found"
    post:
      summary: "Add a dose for a particular drug with drugId"
      description: ""
      consumes:
      - "application/json"
      parameters:
      - name: "drugId"
        in: "path"
        description: "ID of drug whose dose needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/DrugDose"
      responses:
        202:
          description: "Update Accepted"
        400:
          description: "Invalid ID supplied"
        405:
          description: "Validation exception"
  /lists/Subcounties:
    get:
      summary: "Fetch Sub counties (for select options)"
      description: "Fetch List of all subcounties for regimens (for select options)"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SubCounty"
        400:
          description: "Invalid name value"
  /lists/allergies:
    get:
      summary: "Fetch Regimen allergies (for select options)"
      description: "Fetch List of all allergies for regimens (for select options)"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PatientDrugAllergy"
        400:
          description: "Invalid name value"
    post:
      summary: "create a Category"
      description: "create a Category"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        201:
          description: "Allergy Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PatientDrugAllergy"
        405:
          description: "Invalid input"
  /lists/allergies/{allergyId}:
    get:
      summary: "Fetch Allergy specified by allergyId"
      description: "Fetch Allergy specified by allergyId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "allergyId"
        in: "path"
        description: "ID of allergy"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PatientDrugAllergy"
        400:
          description: "Invalid allergy name value"
    put:
      summary: "Update an existing Category"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "allergyId"
        in: "path"
        description: "ID of allergy"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PatientDrugAllergy"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "Allergy not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Deletes a Allergy specified by allergyId"
      description: ""
      parameters:
      - name: "allergyId"
        in: "path"
        description: "ID of allergy"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid allergy value"
        204:
          description: "Allergy deleted"
  /lists/categories:
    get:
      summary: "Fetch Regimen Categories (for select options)"
      description: "Fetch List of all categories for regimens (for select options)"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Category"
        400:
          description: "Invalid name value"
    post:
      summary: "create a Category"
      description: "create a Category"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        201:
          description: "Category Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Category"
        405:
          description: "Invalid input"
  /lists/categories/{categoryId}:
    get:
      summary: "Fetch Category specified by categoryId"
      description: "Fetch Category specified by categoryId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "ID of category that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Category"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing Category"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "ID of category that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Category"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "Category not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Deletes a Category specified by categoryId"
      description: ""
      parameters:
      - name: "categoryId"
        in: "path"
        description: "ID of category that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid category value"
        204:
          description: "Category deleted"
  /lists/doses:
    get:
      summary: "Fetch doses"
      description: "Fetch List of all doses "
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Dose"
        400:
          description: "Invalid name value"
    post:
      summary: "create a Dose"
      description: "create a Dose"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        201:
          description: "Dose Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Dose"
        405:
          description: "Invalid input"
  /lists/doses/{doseId}:
    get:
      summary: "Fetch Dose specified by doseId"
      description: "Fetch Dose specified by doseId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "doseId"
        in: "path"
        description: "ID of Dose that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Dose"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing Dose"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "doseId"
        in: "path"
        description: "ID of Dose that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Dose"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "Dose not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Deletes a Dose specified by doseId"
      description: ""
      parameters:
      - name: "doseId"
        in: "path"
        description: "ID of Dose that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid Dose value"
        204:
          description: "Dose deleted"
  /lists/indications:
    get:
      summary: "Fetch indications"
      description: "Fetch List of all indications "
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Indication"
        400:
          description: "Invalid name value"
    post:
      summary: "create an Indication"
      description: "create an Indication"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        201:
          description: "Indication Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Indication"
        405:
          description: "Invalid input"
  /lists/indications/{indicationId}:
    get:
      summary: "Fetch Indication specified by indicationId"
      description: "Fetch Indication specified by indicationId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "indicationId"
        in: "path"
        description: "ID of Indication that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Indication"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing Indication"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "indicationId"
        in: "path"
        description: "ID of Indication that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Indication"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "Indication not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Deletes an Indication specified by indicationId"
      description: ""
      parameters:
      - name: "indicationId"
        in: "path"
        description: "ID of Indication that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid Indication value"
        204:
          description: "Indication deleted"

  /lists/classifications:
    get:
      summary: "Fetch classifications"
      description: "Fetch List of all classifications"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Classification"
        400:
          description: "Invalid name value"
    post:
      summary: "create a Classification"
      description: "create a Classification"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        201:
          description: "Classification Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Classification"
        405:
          description: "Invalid input"
  /lists/classifications/{classificationId}:
    get:
      summary: "Fetch Classification specified by classificationId"
      description: "Fetch Classification specified by classificationId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "classificationId"
        in: "path"
        description: "ID of Classification that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Classification"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing Classification"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "classificationId"
        in: "path"
        description: "ID of Classification that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Classification"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "Classification not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Deletes a Classification specified by classificationId"
      description: ""
      parameters:
      - name: "classificationId"
        in: "path"
        description: "ID of Classification that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid Classification value"
        204:
          description: "Classification deleted"
  /lists/changereason:
    get:
      summary: "Fetch Change Reasons (for select options)"
      description: "Fetch List of all Change Reasons (for select options)"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Category"
        400:
          description: "Invalid name value"
    post:
      summary: "create a Change Reason"
      description: "create a Change Reason"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        201:
          description: "Change Reason Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Change"
        405:
          description: "Invalid input"
  /lists/changereason/{changereasonId}:
    get:
      summary: "Fetch Change Reason specified by changereasonId"
      description: "Fetch Change Reason specified by changereasonId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "changereasonId"
        in: "path"
        description: "ID of Change Reason that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Change"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing Change Reason"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "changereasonId"
        in: "path"
        description: "ID of Change Reason that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Change"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "Category not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Deletes a Change Reason specified by changereasonId"
      description: ""
      parameters:
      - name: "changereasonId"
        in: "path"
        description: "ID of Change Reason that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid category value"
        204:
          description: "Change Reason deleted"
  /lists/counties:
    get:
      summary: "Fetch counties (for select options)"
      description: "Fetch List of all counties for regimens (for select options)"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/County"
        400:
          description: "Invalid name value"
    post:
      summary: "create a Category"
      description: "create a Category"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        201:
          description: "County Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/County"
        405:
          description: "Invalid input"
  /lists/counties/{countyId}:
    get:
      summary: "Fetch County specified by countyId"
      description: "Fetch County specified by countyId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "countyId"
        in: "path"
        description: "ID of county that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/County"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing County"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "countyId"
        in: "path"
        description: "ID of county that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/County"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "County not found"
        400:
          description: "Invalid ID supplied"
  /lists/counties/{countyId}/Subcounties:
    get:
      summary: "Fetch counties (for select options)"
      description: "Fetch List of all counties for regimens (for select options)"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "countyId"
        in: "path"
        description: "ID of County that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/County"
        400:
          description: "Invalid name value"
    post:
      summary: "create a Category"
      description: "create a Category"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "countyId"
        in: "path"
        description: "ID of County that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        201:
          description: "County Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/County"
        405:
          description: "Invalid input"
  /lists/counties/{countyId}/Subcounties/{subcountyId}:
    get:
      summary: "Fetch County specified by countyId"
      description: "Fetch subCounty specified by subcountyId within County (countyId)"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "countyId"
        in: "path"
        description: "ID of county"
        required: true
        type: "integer"
        format: "int64"
      - name: "subcountyId"
        in: "path"
        description: "ID of subcounty"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SubCounty"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing SubCounty for a county (countyId)"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "countyId"
        in: "path"
        description: "ID of county"
        required: true
        type: "integer"
        format: "int64"
      - name: "subcountyId"
        in: "path"
        description: "ID of subcounty"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SubCounty"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "SubCounty not found"
        400:
          description: "Invalid ID supplied"
  /lists/facilities:
    get:
      summary: "Fetch Facilities (for select options)"
      description: "Fetch List of all Facilities (for select options)"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Facility"
        400:
          description: "Invalid name value"
    post:
      summary: "create a Facility"
      description: "create a Facility"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        201:
          description: "Facility Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Facility"
        405:
          description: "Invalid input"
  /lists/facilities/{facilityId}:
    get:
      summary: "Fetch Facility specified by facilityId"
      description: "Fetch Facility specified by facilityId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "facilityId"
        in: "path"
        description: "ID of Facility that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Facility"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing Facility"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "facilityId"
        in: "path"
        description: "ID of Facility that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Facility"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "Facility not found"
        400:
          description: "Invalid ID supplied"
  /lists/facilitytypes:
    get:
      summary: "Fetch Facility types (for select options)"
      description: "Fetch List of all Facility types (for select options)"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FacilityType"
        400:
          description: "Invalid name value"
    post:
      summary: "create a Facility type"
      description: "create a Facility type"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        201:
          description: "Facility type Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FacilityType"
        405:
          description: "Invalid input"
  /lists/facilitytypes/{facilityId}:
    get:
      summary: "Fetch Facility type specified by facilitytypeId"
      description: "Fetch Facility type specified by facilitytypeId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "facilityId"
        in: "path"
        description: "ID of Facility type that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FacilityType"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing Facility type"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "facilityId"
        in: "path"
        description: "ID of Facility type that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/FacilityType"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "Facility type not found"
        400:
          description: "Invalid ID supplied"

  /lists/familyplanning:
    get:
      summary: "Fetch list of Family Planning (for select options)"
      description: "List of Family planning  items(for select options)"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FamilyPlanning"
        400:
          description: "Invalid name value"
    post:
      summary: "create a FamilyPlanning item"
      description: "create a FamilyPlanning item"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        201:
          description: "FamilyPlanning item Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FamilyPlanning"
        405:
          description: "Invalid input"
  /lists/familyplanning/{familyplanningId}:
    get:
      summary: "Fetch a FamilyPlanning item specified by familyplanningId"
      description: "Fetch a FamilyPlanning item specified by familyplanningId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "familyplanningId"
        in: "path"
        description: "ID of FamilyPlanning item"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FamilyPlanning"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing FamilyPlanning item"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "familyplanningId"
        in: "path"
        description: "ID of FamilyPlanning item"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/FamilyPlanning"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "FamilyPlanning item not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Deletes a FamilyPlanning item specified by familyplanningId"
      description: ""
      parameters:
      - name: "familyplanningId"
        in: "path"
        description: "ID of FamilyPlanning item"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid allergy value"
        204:
          description: "FamilyPlanning item deleted"
  /lists/generic:
    get:
      summary: "Fetch list of Generic items(for select options)"
      description: "List of Generic items(for select options)"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Generic"
        400:
          description: "Invalid name value"
    post:
      summary: "Add an generic item"
      description: "Add an generic item"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Generic"
      responses:
        201:
          description: "generic item Added Successfully"
          schema:
            type: "string"
        405:
          description: "Invalid input"
  /lists/generic/{genericId}:
    get:
      summary: "Fetch a Generic item specified by genericId"
      description: "Fetch a Generic item specified by genericId"
      produces:
      - "application/json"
      parameters:
      - name: "genericId"
        in: "path"
        description: "ID of Generic item"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Generic"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing Generic item specified by genericId"
      description: ""
      consumes:
      - "application/json"
      parameters:
      - name: "genericId"
        in: "path"
        description: "ID of Generic item"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Generic"
      responses:
        202:
          description: "Update Accepted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "generic not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Deletes a Generic item specified by genericId"
      description: ""
      parameters:
      - name: "genericId"
        in: "path"
        description: "ID of Generic item"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Generic item value"
        204:
          description: "Generic item deleted"
  /lists/illnesses:
    get:
      summary: "Fetch list of Illnessess(for select options)"
      description: "List of Illnessess(for select options)"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ChronicIllnesses"
        400:
          description: "Invalid name value"
    post:
      summary: "Add an illness"
      description: "Add an illness"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ChronicIllnesses"
      responses:
        201:
          description: "Illness Added Successfully"
          schema:
            type: "string"
        405:
          description: "Invalid input"
  /lists/illnesses/{illnessId}:
    get:
      summary: "Fetch a Illness specified by illnessId"
      description: "Fetch a Illness specified by illnessId"
      produces:
      - "application/json"
      parameters:
      - name: "illnessId"
        in: "path"
        description: "ID of FamilyPlanning item"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/illness"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing Illness specified by illnessId"
      description: ""
      parameters:
      - name: "illnessId"
        in: "path"
        description: "ID of FamilyPlanning item"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ChronicIllnesses"
      responses:
        202:
          description: "Update Accepted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "illness not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Deletes a FamilyPlanning item specified by familyplanningId"
      description: ""
      parameters:
      - name: "illnessId"
        in: "path"
        description: "ID of FamilyPlanning item"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "FamilyPlanning item value"
        204:
          description: "FamilyPlanning item deleted"
  /lists/instruction:
    get:
      summary: "Fetch list ofInstructionsIllnessess(for select options)"
      description: "List of Instructions(for select options)"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Instruction"
        400:
          description: "Invalid name value"
    post:
      summary: "Add an illness"
      description: "Add an illness"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Instruction"
      responses:
        201:
          description: "Instruction Added Successfully"
          schema:
            type: "string"
        405:
          description: "Invalid input"
  /lists/instruction/{instructionId}:
    get:
      summary: "Fetch a Instruction specified by instructionId"
      description: "Fetch a Instruction specified by instructionId"
      produces:
      - "application/json"
      parameters:
      - name: "instructionId"
        in: "path"
        description: "ID of Instruction item"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Instruction"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing Illness specified by instructionId"
      description: ""
      consumes:
      - "application/json"
      parameters:
      - name: "instructionId"
        in: "path"
        description: "ID of Instruction item"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Instruction"
      responses:
        202:
          description: "Update Accepted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "illness not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Deletes a Instruction item specified by instructionId"
      description: ""
      parameters:
      - name: "instructionId"
        in: "path"
        description: "ID of Instruction item"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Instruction item value"
        204:
          description: "Instruction item deleted"
  /lists/nonaadherencereason:
    get:
      summary: "Fetch Non-Adherence Reasons  (for select options)"
      description: "Fetch Non-Adherence Reasons  (for select options)"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/NonAdherenceReason"
        400:
          description: "Invalid name value"
    post:
      summary: "create a Non-Adherence Reason"
      description: "create a Non-Adherence Reason"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        201:
          description: "Non-Adherence Reason Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/NonAdherenceReason"
        405:
          description: "Invalid input"
  /lists/nonadherence/{nonadherenceId}:
    get:
      summary: "Fetch Non-Adherence Reason specified by nonadherenceId"
      description: "Fetch Non-Adherence Reason specified by nonadherenceId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "nonadherenceId"
        in: "path"
        description: "ID of Non-Adherence Reason that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/NonAdherenceReason"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing Non-Adherence Reason"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "nonadherenceId"
        in: "path"
        description: "ID of Non-Adherence Reason that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/NonAdherenceReason"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "Non-Adherence Reason not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Deletes a Non-Adherence Reason specified by nonadherenceId"
      description: ""
      parameters:
      - name: "nonadherenceId"
        in: "path"
        description: "ID of Non-Adherence Reason that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid Non-Adherence Reason value"
        204:
          description: "Non-Adherence Reason deleted"
  /lists/patientsources:
    get:
      summary: "Fetch Sources list  (for select options)"
      description: "Fetch Sources list (for select options)"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PatientSources"
        400:
          description: "Invalid name value"
    post:
      summary: "create a Source"
      description: "create a Source"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        201:
          description: "Source Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PatientSources"
        405:
          description: "Invalid input"
  /lists/patientsources/{patientsourcesId}:
    get:
      summary: "Fetch Source specified by patientsourcesId"
      description: "Fetch Source specified by patientsourcesId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientsourcesId"
        in: "path"
        description: "ID of Source that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PatientSources"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing Source"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientsourcesId"
        in: "path"
        description: "ID of Source that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PatientSources"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "Source not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Deletes a Source specified by patientsourcesId"
      description: ""
      parameters:
      - name: "patientsourcesId"
        in: "path"
        description: "ID of Source that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid Source value"
        204:
          description: "Source deleted"
  /lists/pepreason:
    get:
      summary: "Fetch PEP Reasons  (for select options)"
      description: "Fetch PEP Reasons  (for select options)"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PepReason"
        400:
          description: "Invalid name value"
    post:
      summary: "create a PEP Reason"
      description: "create a PEP Reason"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        201:
          description: "PEP Reason Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PepReason"
        405:
          description: "Invalid input"
  /lists/pepreason/{pepreasonId}:
    get:
      summary: "Fetch PEP Reason specified by pepreasonId"
      description: "Fetch PEP Reason specified by pepreasonId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "pepreasonId"
        in: "path"
        description: "ID of PEP Reason that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PepReason"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing PEP Reason"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "pepreasonId"
        in: "path"
        description: "ID of PEP Reason that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PepReason"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "PEP Reason not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Deletes a PEP Reason specified by pepreasonId"
      description: ""
      parameters:
      - name: "pepreasonId"
        in: "path"
        description: "ID of PEP Reason that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid PEP Reason value"
        204:
          description: "PEP Reason deleted"
  /lists/prophylaxis:
    get:
      summary: "Fetch Prophylaxis  (for select options)"
      description: "Fetch Prophylaxis  (for select options)"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Prophylaxis"
        400:
          description: "Invalid name value"
    post:
      summary: "create a Prophylaxis"
      description: "create a Prophylaxis"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        201:
          description: "Prophylaxis Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Prophylaxis"
        405:
          description: "Invalid input"
  /lists/prophylaxis/{prophylaxisId}:
    get:
      summary: "Fetch Prophylaxis specified by prophylaxisId"
      description: "Fetch Prophylaxis specified by prophylaxisId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "prophylaxisId"
        in: "path"
        description: "ID of Prophylaxis that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Prophylaxis"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing Prophylaxis"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "prophylaxisId"
        in: "path"
        description: "ID of Prophylaxis that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Prophylaxis"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "Prophylaxis not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Deletes a Prophylaxis specified by prophylaxisId"
      description: ""
      parameters:
      - name: "prophylaxisId"
        in: "path"
        description: "ID of Prophylaxis that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid Prophylaxis value"
        204:
          description: "Prophylaxis deleted"
  /lists/purpose:
    get:
      summary: "Fetch Purpose list  (for select options)"
      description: "Fetch Purpose list (for select options)"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Purpose"
        400:
          description: "Invalid name value"
    post:
      summary: "create a Purpose"
      description: "create a Purpose"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        201:
          description: "Purpose Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Purpose"
        405:
          description: "Invalid input"
  /lists/purpose/{purposeId}:
    get:
      summary: "Fetch Purpose specified by purposeId"
      description: "Fetch Purpose specified by purposeId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "purposeId"
        in: "path"
        description: "ID of Purpose that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Purpose"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing Purpose"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "purposeId"
        in: "path"
        description: "ID of Purpose that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Purpose"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "Purpose not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Deletes a Purpose specified by purposeId"
      description: ""
      parameters:
      - name: "purposeId"
        in: "path"
        description: "ID of Purpose that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid Purpose value"
        204:
          description: "Purpose deleted"
  /lists/services:
    get:
      summary: "Fetch Services list  (for select options)"
      description: "Fetch Services list (for select options)"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Services"
        400:
          description: "Invalid name value"
    post:
      summary: "create a Service"
      description: "create a Service"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        201:
          description: "Service Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Services"
        405:
          description: "Invalid input"
  /lists/services/{serviceId}:
    get:
      summary: "Fetch Service specified by serviceId"
      description: "Fetch Service specified by serviceId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "serviceId"
        in: "path"
        description: "ID of Service that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Services"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing Service"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "serviceId"
        in: "path"
        description: "ID of Service that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Service"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "Service not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Deletes a service specified by serviceId"
      description: ""
      parameters:
      - name: "serviceId"
        in: "path"
        description: "ID of Service that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid service value"
        204:
          description: "service deleted"
  /lists/whostage:
    get:
      summary: "Fetch Drug Allergies  (for select options)"
      description: "Fetch Drug Allergies  (for select options)"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WhoStage"
        400:
          description: "Invalid name value"
    post:
      summary: "create a WhoStage"
      description: "create a WhoStage"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        201:
          description: "WhoStage Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WhoStage"
        405:
          description: "Invalid input"
  /lists/whostage/{whostageId}:
    get:
      summary: "Fetch a list of WHO stages specified by whostageId"
      description: "Fetch a list of WHO stages specified by whostageId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "whostageId"
        in: "path"
        description: "ID of WhoStage that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "query"
        description: "name to filter by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WhoStage"
        400:
          description: "Invalid name value"
    put:
      summary: "Update an existing Who Stage"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "whostageId"
        in: "path"
        description: "ID of WhoStage that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/WhoStage"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "WhoStage not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Deletes a WhoStage specified by whostageId"
      description: ""
      parameters:
      - name: "whostageId"
        in: "path"
        description: "ID of WhoStage that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid WhoStage value"
        204:
          description: "WhoStage deleted"
  /patients:
    get:
      summary: "get's a list of patients"
      description: ""
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "limit"
        in: "query"
        description: "Number of patients to fetch"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        description: "non-negative offset integer for fetching patients"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Patients"
        400:
          description: "Invalid status value"
    post:
      summary: "Add a new patient to the facility"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Patient"
      responses:
        201:
          description: "Patient Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Patient"
        405:
          description: "Invalid input"
  /patients/{patientId}:
    get:
      summary: "Find patient by patientId"
      description: "Returns the patient with the specified patientId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        404:
          description: "Patient not found"
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Patient"
        400:
          description: "Invalid ID supplied"
    put:
      summary: "Update an existing patient "
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Patient"
      responses:
        405:
          description: "Validation exception"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Remove a patient"
      description: ""
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid patient value"
        204:
          description: "Patient has been removed"
  /patients/{patientId}/allergies:
    get:
      summary: "Fetch a patient's allergies"
      description: "Fetch allergies"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        404:
          description: "Patient or Allergies not found"
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PatientDrugAllergy"
        400:
          description: "Invalid ID supplied"
    post:
      summary: "Add a new PatientDrugAllergy to a patient"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PatientDrugAllergy"
      responses:
        201:
          description: "Patient Allergies Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PatientDrugAllergy"
        405:
          description: "Invalid input"
  /patients/{patientId}/allergies/{allergyId}:
    get:
      summary: "Fetch a patient's allergies"
      description: "Fetch allergies"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "allergyId"
        in: "path"
        description: "ID of Allergies that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        404:
          description: "Patient or Allergies not found"
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PatientDrugAllergy"
        400:
          description: "Invalid ID supplied"
    put:
      summary: "Update an existing patient Allergies"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "allergyId"
        in: "path"
        description: "ID of Allergies that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PatientDrugAllergy"
      responses:
        405:
          description: "Validation exception"
        404:
          description: "Patient or Allergies not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Remove a patient PatientAllergies"
      description: ""
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "allergyId"
        in: "path"
        description: "ID of Allergies that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid value"
        204:
          description: "Allergy has been removed"
  /patients/{patientId}/patienttb:
    get:
      summary: "Fetch a patient's TB"
      description: "Fetch TB"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        404:
          description: "Patient or TB not found"
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PatientTb"
        400:
          description: "Invalid ID supplied"
    post:
      summary: "Add a new PatientTb to a patient"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PatientTb"
      responses:
        201:
          description: "Patient TB Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PatientTb"
        405:
          description: "Invalid input"
  /patients/{patientId}/patienttb/{patienttbId}:
    get:
      summary: "Fetch a patient's TB"
      description: "Fetch TB"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "patienttbId"
        in: "path"
        description: "ID of TB that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        404:
          description: "Patient or TB not found"
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PatientTb"
        400:
          description: "Invalid ID supplied"
    put:
      summary: "Update an existing patient TB"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "patienttbId"
        in: "path"
        description: "ID of TB that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PatientTb"
      responses:
        405:
          description: "Validation exception"
        404:
          description: "Patient or TB not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Remove a patient PatientTB"
      description: ""
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "patienttbId"
        in: "path"
        description: "ID of TB that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid value"
        204:
          description: "TB has been removed"
  /patients/{patientId}/appointments:
    get:
      summary: "Fetch the patient's appointments"
      description: "Fetch appointments"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient and appointment that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        404:
          description: "Patient or Appointment not found"
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Appointments"
        400:
          description: "Invalid ID supplied"
    post:
      summary: "Add a new Appointments to a patient"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient and appointment that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Appointments"
      responses:
        201:
          description: "Patient appointments Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Appointments"
        405:
          description: "Invalid input"
  /patients/{patientId}/appointments/{appointmentId}:
    get:
      summary: "Fetch the patient's appointments"
      description: "Fetch appointments"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient and appointment that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "appointmentId"
        in: "path"
        description: "ID of appointment that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        404:
          description: "Patient or Appointment not found"
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Appointments"
        400:
          description: "Invalid ID supplied"
    put:
      summary: "Update an existing patient appointment"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient and appointment that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "appointmentId"
        in: "path"
        description: "ID of appointment that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Appointments"
      responses:
        405:
          description: "Validation exception"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Remove a patient appointment"
      description: ""
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient and appointment that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "appointmentId"
        in: "path"
        description: "ID of appointment that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid patient value"
        204:
          description: "regimens has been removed"
  /patients/{patientId}/dependants/{dependantId}:
    get:
      summary: "Fetch a patient's dependants"
      description: "Fetch dependants"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "dependantId"
        in: "path"
        description: "ID of dependants that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        404:
          description: "Patient or dependants not found"
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PatientDependants"
        400:
          description: "Invalid ID supplied"
    put:
      summary: "Update an existing patient dependants"
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "dependantId"
        in: "path"
        description: "ID of dependants that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PatientDependants"
      responses:
        202:
          description: "Update Accepted"
        405:
          description: "Validation exception"
        404:
          description: "Patient or Dependants not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Remove a patient Dependants"
      description: ""
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "dependantId"
        in: "path"
        description: "ID of dependants that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid patient value"
        204:
          description: "Dependants has been removed"
  /patients/{patientId}/dispense:
    get:
      summary: "Fetch a patient's visit"
      description: "Fetch visits"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient and Visits that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        404:
          description: "Patient or Visits not found"
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Visits"
        400:
          description: "Invalid ID supplied"
    post:
      summary: "Dispense drugs to a patient during a visit"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient and Visits that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Dispense"
      responses:
        201:
          description: "Patient Visit Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Visits"
        405:
          description: "Invalid input"
  /patients/{patientId}/prophylaxis/{prophylaxisId}:
    get:
      summary: "Fetch the prophylaxis patient is administered"
      description: "Fetch prophylaxis"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "prophylaxisId"
        in: "path"
        description: "ID of prophylaxis that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        404:
          description: "prophylaxis not found"
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PatientProphylaxis"
        400:
          description: "Invalid ID supplied"
    put:
      summary: "Update an existing patient prophylaxis"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "prophylaxisId"
        in: "path"
        description: "ID of prophylaxis that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PatientProphylaxis"
      responses:
        405:
          description: "Validation exception"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Remove a patient of a Prophylaxis"
      description: ""
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "prophylaxisId"
        in: "path"
        description: "ID of prophylaxis that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid patient value"
        204:
          description: "Prophylaxis has been removed"
  /patients/{patientId}/regimens/{regimenId}:
    get:
      summary: "Fetch the regimens patient is administered"
      description: "Fetch regimens"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "regimenId"
        in: "path"
        description: "ID of regimen that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        404:
          description: "Regimen not found"
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PatientRegimen"
        400:
          description: "Invalid ID supplied"
    post:
      summary: "Add a new regimen to a patient"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "regimenId"
        in: "path"
        description: "ID of regimen that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PatientRegimen"
      responses:
        201:
          description: "Patient regimen Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PatientRegimen"
        405:
          description: "Invalid input"
    put:
      summary: "Update an existing patient regimen"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "regimenId"
        in: "path"
        description: "ID of regimen that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Patients"
      responses:
        405:
          description: "Validation exception"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Remove a patient of a regimen"
      description: ""
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID of patient that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "regimenId"
        in: "path"
        description: "ID of regimen that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid parameters"
        204:
          description: "regimens has been removed"
  /patients/{patientId}/visits:
    get:
      summary: "Fetch a patient's visit"
      description: "Fetch visits"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient and Visits that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        404:
          description: "Patient or Visits not found"
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Visits"
        400:
          description: "Invalid ID supplied"
    post:
      summary: "Add a new Visits to a patient"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient and Visits that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Visits"
      responses:
        201:
          description: "Patient Visit Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Visits"
        405:
          description: "Invalid input"
  /patients/{patientId}/visits/{visitId}:
    get:
      summary: "Fetch a patient's visit"
      description: "Fetch visits"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient and Visits that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "visitId"
        in: "path"
        description: "ID's of Visits that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        404:
          description: "Patient or Visits not found"
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Visits"
        400:
          description: "Invalid ID supplied"
    put:
      summary: "Update an existing patient appointment"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient and Visits that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "visitId"
        in: "path"
        description: "ID's of Visits that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Visits"
      responses:
        405:
          description: "Validation exception"
        404:
          description: "Patient or Visits not found"
        400:
          description: "Invalid ID supplied"
    delete:
      summary: "Remove a patient Visit"
      description: ""
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID's of patient and Visits that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "visitId"
        in: "path"
        description: "ID's of Visits that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid patient value"
        204:
          description: "Visit has been removed"
  /services:
    get:
      summary: "fetches a list of services at a facility"
      description: ""
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "limit"
        in: "query"
        description: "Number of service to fetch"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Service"
        400:
          description: "Invalid status value"
    post:
      summary: "Add a new service to the facility"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Service"
      responses:
        201:
          description: "Service Added Successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Service"
        405:
          description: "Invalid input"
  /services/{serviceId}:
    get:
      summary: "Find service by serviceId"
      description: "Returns the service with the specified serviceId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "serviceId"
        in: "path"
        description: "Particular Service at facility specified by the ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Patient"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Service not found"
    put:
      summary: "Update an existing service at facility specified by the ID"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "serviceId"
        in: "path"
        description: "Particular Service at facility specified by the ID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Service"
      responses:
        202:
          description: "Update Accepted"
        400:
          description: "Invalid ID supplied"
        405:
          description: "Validation exception"
    delete:
      summary: "Deletes the service at facility specified by the ID"
      description: ""
      parameters:
      - name: "serviceId"
        in: "path"
        description: "Particular Service at facility specified by the ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        204:
          description: "Patient deleted"
        400:
          description: "Invalid patient value"
  /services/{serviceId}/prophylaxis:
    get:
      summary: "Fetch Prophylaxis for a service"
      description: "Returns the prophylaxis for the  service with the specified serviceId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "serviceId"
        in: "path"
        description: "ID of service whose prophylaxis needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PatientProphylaxis"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Resource not found"
    post:
      summary: "add Prophylaxis to service  specified by serviceId"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "serviceId"
        in: "path"
        description: "ID of service that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PatientProphylaxis"
      responses:
        202:
          description: "Update Accepted"
        400:
          description: "Invalid ID supplied"
        405:
          description: "Validation exception"
  /services/{serviceId}/prophylaxis/{prophylaxisId}:
    get:
      summary: "Fetch Prophylaxis for a service"
      description: "Returns the Prophylaxis specified by prophylaxisId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "serviceId"
        in: "path"
        description: "ID of service that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "prophylaxisId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PatientProphylaxis"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Resource not found"
    put:
      summary: "Update the Prophylaxis specified by prophylaxisId"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "serviceId"
        in: "path"
        description: "ID of service whose prophylaxis needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "prophylaxisId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PatientProphylaxis"
      responses:
        202:
          description: "Update Accepted"
        400:
          description: "Invalid ID supplied"
        405:
          description: "Validation exception"
    delete:
      summary: "Deletes the Prophylaxis specified by prophylaxisId"
      description: ""
      parameters:
      - name: "serviceId"
        in: "path"
        description: "ID of service that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "prophylaxisId"
        in: "path"
        required: true
        type: "string"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        204:
          description: "Patient deleted"
        400:
          description: "Invalid patient value"
  /services/{serviceId}/regimens:
    get:
      summary: "Find service by serviceId"
      description: "Returns the service with the specified serviceId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "serviceId"
        in: "path"
        description: "ID of service that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        404:
          description: "Regimen not found"
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Regimen"
        400:
          description: "Invalid ID supplied"
    post:
      summary: "Add a regimen for a particular service with serviceId"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "serviceId"
        in: "path"
        description: "ID of service that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Regimen"
      responses:
        202:
          description: "Update Accepted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Regimens not found"
        405:
          description: "Validation exception"
  /services/{serviceId}/regimens/{regimenId}:
    get:
      summary: "Find service by serviceId"
      description: "Returns the service with the specified serviceId"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "serviceId"
        in: "path"
        description: "ID of service that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "regimenId"
        in: "path"
        description: "ID of service that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        404:
          description: "Regimen not found"
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PatientRegimen"
        400:
          description: "Invalid ID supplied"
    put:
      summary: "Update a Regimen {regimenId} available for a particular service with\
        \ serviceId"
      description: ""
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "serviceId"
        in: "path"
        description: "ID of service that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "regimenId"
        in: "path"
        description: "ID of service that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PatientRegimen"
      responses:
        202:
          description: "Update Accepted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Patient Regimen not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Deletes a Particular Regimen {regimenId} available for a particular\
        \ service with serviceId"
      description: ""
      parameters:
      - name: "serviceId"
        in: "path"
        description: "ID of service that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "regimenId"
        in: "path"
        description: "ID of service that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        204:
          description: "Patient deleted"
        400:
          description: "Invalid patient value"
  /users:
    get:
      summary: "fetches a list of users at a facility"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Number of Users to fetch"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Invalid status value"
    post:
      summary: "Add a new user to the facility"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "User Added Successfully"
          schema:
            $ref: "#/definitions/User"
        405:
          description: "Invalid input"
  /users/{usersId}:
    get:
      summary: "Find user by userId"
      description: "Returns the user with the specified userId"
      produces:
      - "application/json"
      parameters:
      - name: "usersId"
        in: "path"
        description: "Particular user specified by the userID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
    put:
      summary: "Update an existing user specified by the userId"
      description: ""
      consumes:
      - "application/json"
      parameters:
      - name: "usersId"
        in: "path"
        description: "Particular user specified by the userID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        202:
          description: "Update Accepted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Deletes the user specified by the userId"
      description: ""
      parameters:
      - name: "usersId"
        in: "path"
        description: "Particular user specified by the userID"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        204:
          description: "User deleted"
        400:
          description: "Invalid patient value"
  /users/accesslevel:
    get:
      summary: "fetches a list of Access Levels for users"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Number of Access Levels to fetch"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AccessLevel"
        400:
          description: "Invalid status value"
    post:
      summary: "Add a new Access Level to the facility"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AccessLevel"
      responses:
        201:
          description: "Access Level Added Successfully"
          schema:
            $ref: "#/definitions/AccessLevel"
        405:
          description: "Invalid input"
  /users/accesslevel/{accesslevelId}:
    get:
      summary: "Find Access Level by roleId"
      description: "Returns the Access Level with the specified roleId"
      produces:
      - "application/json"
      parameters:
      - name: "accesslevelId"
        in: "path"
        description: "Particular Access Level specified by the roleID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AccessLevel"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Access Level not found"
    put:
      summary: "Update an existing Access Level specified by the roleId"
      description: ""
      consumes:
      - "application/json"
      parameters:
      - name: "accesslevelId"
        in: "path"
        description: "Particular Access Level specified by the roleID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AccessLevel"
      responses:
        202:
          description: "Update Accepted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Access Level not found"
        405:
          description: "Validation exception"
    delete:
      summary: "Deletes the Access Level specified by the roleId"
      description: ""
      parameters:
      - name: "accesslevelId"
        in: "path"
        description: "Particular Access Level specified by the roleID"
        required: true
        type: "integer"
        format: "int64"
      - name: "api_key"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        204:
          description: "Access Level deleted"
        400:
          description: "Invalid patient value"
securityDefinitions:
  adt_auth:
    type: "oauth2"
    authorizationUrl: "http://api.adtcore.io/api/oauth/dialog"
    flow: "implicit"
    scopes:
      create_patient: "Create patients"
      read_patient: "Read your patients"
      read_illnesses: "Read Chronic Illnesses"
      read_allergies: "Read Drug Allergies"
      read_patientsources: "Read Patient Sources"
      read_service: "raed services"
      create_service: "create services"
      create_drug: "create drugs"
      read_drug: "read drugs"
definitions:
  Facility:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      code:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      postal_address:
        type: "string"
      email_address:
        type: "string"
      phone_number:
        type: "integer"
        format: "int64"
      adult_age:
        type: "integer"
        format: "int32"
      service:
        type: "string"
      weekday_max:
        type: "integer"
        format: "int32"
      weekend_max:
        type: "integer"
        format: "int32"
      is_active:
        type: "integer"
        format: "int32"
      county_id:
        type: "integer"
        format: "int32"
      county_sub_id:
        type: "integer"
        format: "int32"
      supporter_id:
        type: "integer"
        format: "int32"
  FacilityType:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
  Appointment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      appointment_date:
        type: "string"
      is_appointment:
        type: "integer"
        format: "int32"
      facility_id:
        type: "integer"
        format: "int32"
  Regimen:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      code:
        type: "string"
      name:
        type: "string"
      is_active:
        type: "integer"
        format: "int64"
      service_id:
        type: "integer"
        format: "int64"
      category_id:
        type: "integer"
        format: "int64"
  PatientPartner:
    type: "object"
    properties:
      partnerId:
        type: "integer"
        format: "int32"
      status:
        type: "string"
  Drug:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      pack_size:
        type: "integer"
        format: "int32"
      duration:
        type: "integer"
        format: "int32"
      quantity:
        type: "integer"
        format: "int32"
      is_arv:
        type: "boolean"
        default: false
      is_tb:
        type: "boolean"
        default: false
      is_active:
        type: "boolean"
        default: false
      unit_id:
        type: "integer"
        format: "int32"
      dose_id:
        type: "integer"
        format: "int32"
      generic_id:
        type: "integer"
        format: "int32"
      supporter_id:
        type: "integer"
        format: "int32"
  PatientDrugAllergy:
    type: "object"
    properties:
      drug_id:
        type: "integer"
        format: "int32"
      drugrallergy:
        type: "string"
      is_active:
        type: "boolean"
        default: false
  Generic:
    type: "object"
    properties:
      drug_id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      is_active:
        type: "boolean"
        default: false
  ChronicIllnesses:
    type: "object"
    properties:
      illness_id:
        type: "integer"
        format: "int32"
      illness:
        type: "string"
      is_active:
        type: "boolean"
        default: false
  PatientSources:
    type: "object"
    properties:
      source_id:
        type: "integer"
        format: "int32"
      source:
        type: "string"
      is_active:
        type: "boolean"
        default: false
  PatientDrugOther:
    type: "object"
    properties:
      patient_id:
        type: "integer"
        format: "int32"
      allergy_name:
        type: "string"
  FamilyPlanning:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
  PatientFamilyPlanning:
    type: "object"
    properties:
      patientId:
        type: "integer"
        format: "int32"
      family_planning_id:
        $ref: "#/definitions/FamilyPlanning"
  NonAdherenceReason:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
  Visit:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      current_height:
        type: "integer"
        format: "int32"
      current_weight:
        type: "integer"
        format: "int32"
      visit_date:
        type: "string"
      appointment_adherence:
        type: "integer"
        format: "int32"
      is_active:
        type: "integer"
        format: "int32"
      patient_id:
        type: "integer"
        format: "int32"
      facility_id:
        type: "integer"
        format: "int32"
      user_id:
        type: "integer"
        format: "int32"
      purpose_id:
        type: "integer"
        format: "int32"
      last_regimen_id:
        type: "integer"
        format: "int32"
      current_regimen_id:
        type: "integer"
        format: "int32"
      change_reason_id:
        type: "integer"
        format: "int32"
      non_adherence_reason_id:
        type: "integer"
        format: "int32"
      appointment_id:
        type: "integer"
        format: "int32"
      VisitItems:
        $ref: "#/definitions/VisitItem"
  VisitItem:
    type: "object"
    properties:
      duration:
        type: "integer"
        format: "int32"
      expected_pill_count:
        type: "integer"
        format: "int32"
      actual_pill_count:
        type: "integer"
        format: "int32"
      missed_pill_count:
        type: "integer"
        format: "int32"
      comment:
        type: "string"
      visit_id:
        type: "integer"
        format: "int32"
      stock_id:
        type: "integer"
        format: "int32"
      dose_id:
        type: "integer"
        format: "int32"
      indication_id:
        type: "integer"
        format: "int32"
  Status:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Patient_status:
    type: "object"
    properties:
      patient_id:
        type: "integer"
        format: "int64"
      status_id:
        type: "integer"
        format: "int64"
      change_date:
        type: "string"
      status:
        $ref: "#/definitions/Status"
  Patients:
    type: "object"
    required:
    - "first_name"
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
      ccc_number:
        type: "string"
      appointment:
        $ref: "#/definitions/Appointment"
      visit:
        $ref: "#/definitions/Visit"
      first_name:
        type: "string"
      last_name:
        type: "string"
      other_name:
        type: "string"
      phone_number:
        type: "integer"
        format: "int64"
      alternate_number:
        type: "integer"
        format: "int64"
      physical_address:
        type: "string"
      gender:
        type: "string"
      birth_date:
        type: "string"
      enrollment_date:
        type: "string"
      support_group:
        type: "string"
      is_pregnant:
        type: "boolean"
        default: false
      is_tb:
        type: "boolean"
        default: false
      is_tb_tested:
        type: "boolean"
        default: false
      is_smoke:
        type: "boolean"
        default: false
      is_alchohol:
        type: "boolean"
        default: false
      is_sms:
        type: "boolean"
        default: false
      deleted_at:
        type: "string"
      patient_status:
        $ref: "#/definitions/Patient_status"
  Patient:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      ccc_number:
        type: "string"
      first_name:
        type: "string"
      last_name:
        type: "string"
      other_name:
        type: "string"
      phone_number:
        type: "integer"
        format: "int64"
      alternate_number:
        type: "integer"
        format: "int64"
      physical_address:
        type: "string"
      gender:
        type: "string"
      birth_date:
        type: "string"
      enrollment_date:
        type: "string"
      support_group:
        type: "string"
      is_pregnant:
        type: "boolean"
        default: false
      is_tb:
        type: "boolean"
        default: false
      is_tb_tested:
        type: "boolean"
        default: false
      is_smoke:
        type: "boolean"
        default: false
      is_alchohol:
        type: "boolean"
        default: false
      is_sms:
        type: "boolean"
        default: false
      deleted_at:
        type: "string"
      patient_status:
        $ref: "#/definitions/Patient_status"
      appointment:
        $ref: "#/definitions/Appointment"
      visit:
        $ref: "#/definitions/Visit"
      patient_partner:
        $ref: "#/definitions/PatientPartner"
      patient_family_planning:
        $ref: "#/definitions/PatientFamilyPlanning"
      patient_drug_allergy:
        $ref: "#/definitions/PatientDrugAllergy"
      patient_drug_other:
        $ref: "#/definitions/PatientDrugOther"
  Prophylaxis:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  PatientProphylaxis:
    type: "object"
    properties:
      patient_id:
        type: "integer"
        format: "int64"
      prophylaxis_id:
        type: "integer"
        format: "int64"
      prophylaxis:
        $ref: "#/definitions/Prophylaxis"
  DrugDose:
    type: "object"
    required:
    - "name"
    - "quantity"
    properties:
      name:
        type: "string"
      quantity:
        type: "integer"
        format: "int32"
      frequency:
        type: "string"
  PatientRegimen:
    type: "object"
    properties:
      patient_id:
        type: "integer"
        format: "int64"
      regimen_id:
        type: "integer"
        format: "int64"
      regimen:
        $ref: "#/definitions/Regimen"
  User:
    type: "object"
    required:
    - "access_level"
    - "email"
    - "facility_id"
    - "name"
    - "password"
    - "phone_number"
    properties:
      name:
        type: "string"
        description: "sample user"
      email:
        type: "string"
        description: "email@example.com"
      phone_number:
        type: "integer"
        format: "int32"
        description: "0799330044"
      password:
        type: "string"
        description: "53cr3th@$h"
      access_level:
        type: "integer"
        format: "int32"
        description: "1"
      facility_id:
        type: "integer"
        format: "int32"
        description: "12003"
  Appointments:
    type: "object"
    properties:
      patient_id:
        type: "integer"
        format: "int64"
      Appointment_id:
        type: "integer"
        format: "int64"
      Appointments:
        $ref: "#/definitions/Appointment"
  Visits:
    type: "object"
    properties:
      patient_id:
        type: "integer"
        format: "int64"
      Visit_id:
        type: "integer"
        format: "int64"
      Visit:
        $ref: "#/definitions/Visits"
  PatientDependants:
    type: "object"
    properties:
      patient_id:
        type: "integer"
        format: "int64"
      Dependant_id:
        type: "integer"
        format: "int64"
      Dependants:
        $ref: "#/definitions/Patients"
  Service:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      service_name:
        type: "string"
      service_type:
        type: "string"
  Services:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      service_name:
        type: "string"
      service_type:
        type: "string"
      start_regimen:
        $ref: "#/definitions/Regimen"
      who_stage:
        $ref: "#/definitions/WhoStage"
      prophylaxis:
        $ref: "#/definitions/Prophylaxis"
      pep_reason:
        $ref: "#/definitions/PepReason"
  WhoStage:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  PepReason:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  County:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  SubCounty:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      county_id:
        $ref: "#/definitions/County"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Cdrr:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      status:
        type: "string"
      code:
        type: "string"
      comments:
        type: "string"
      reports_expected:
        type: "string"
      reports_actual:
        type: "integer"
        format: "int64"
      services:
        type: "string"
      is_non_arv:
        type: "integer"
        format: "int64"
      facility_id:
        type: "integer"
        format: "int64"
      supporter_id:
        type: "integer"
        format: "int64"
      cdrr_items:
        $ref: "#/definitions/CdrrItem"
  CdrrItem:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      balance:
        type: "integer"
        format: "int64"
      received:
        type: "integer"
        format: "int64"
      dispensed_units:
        type: "integer"
        format: "int64"
      dispensed_packs:
        type: "integer"
        format: "int64"
      losses:
        type: "integer"
        format: "int64"
      adjustments_pos:
        type: "integer"
        format: "int64"
      adjustments_neg:
        type: "integer"
        format: "int64"
      count:
        type: "integer"
        format: "int64"
      expiry_quantity:
        type: "integer"
        format: "int64"
      out_of_stock:
        type: "integer"
        format: "int64"
      resupply:
        type: "integer"
        format: "int64"
      aggr_consumed:
        type: "integer"
        format: "int64"
      aggr_on_hand:
        type: "integer"
        format: "int64"
      drug_id:
        type: "integer"
        format: "int64"
      cdrr_id:
        type: "integer"
        format: "int64"
  Change:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Classification:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Instruction:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  DrugInstructions:
    type: "object"
    properties:
      drug_id:
        $ref: "#/definitions/Drug"
      instruction_id:
        $ref: "#/definitions/Instruction"
  Dose:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      quantity:
        type: "integer"
        format: "int64"
      frequency:
        type: "integer"
        format: "int64"
  Maps:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      status:
        type: "string"
      code:
        type: "string"
      services:
        type: "string"
      comments:
        type: "string"
      reports_expected:
        type: "integer"
        format: "int64"
      reports_actual:
        type: "integer"
        format: "int64"
  MapsItem:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      total:
        type: "integer"
        format: "int64"
      regimen_id:
        type: "integer"
        format: "int64"
      maps_id:
        type: "integer"
        format: "int64"
  MapsLog:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      status:
        type: "string"
      maps_id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
  PatientTb:
    type: "object"
    properties:
      patient_id:
        $ref: "#/definitions/Patient"
      category:
        type: "string"
      phase:
        type: "string"
      start_date:
        type: "string"
      end_date:
        type: "string"
  Purpose:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Stock:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      transaction_detail:
        type: "string"
      ref_number:
        type: "string"
      user_id:
        type: "integer"
        format: "int64"
      store_id:
        type: "integer"
        format: "int64"
      facility_id:
        type: "integer"
        format: "int64"
      stockitems:
        $ref: "#/definitions/StockItem"
  StockItem:
    type: "object"
    properties:
      batch_number:
        type: "string"
      quantity_in:
        type: "integer"
        format: "int64"
      quantity_out:
        type: "integer"
        format: "int64"
      quantity_packs:
        type: "integer"
        format: "int64"
      balance_before:
        type: "integer"
        format: "int64"
      balance_after:
        type: "integer"
        format: "int64"
      comment:
        type: "string"
      drug_id:
        type: "integer"
        format: "int64"
      stock_id:
        type: "integer"
        format: "int64"
  BinCard:
    type: "object"
    properties:
      unit:
        type: "string"
      max_stock_level:
        type: "string"
      min_stock_level:
        type: "string"
      avg_monthly_consumption:
        type: "string"
      stock:
        $ref: "#/definitions/Stock"
      name:
        type: "string"
      batch_info:
        $ref: "/definitions/DrugBalances"

  DrugBalances:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      drug_id:
        type: "integer"
        format: "int64" 
      batch_number:
        type: "integer"
        format: "int64" 
      expiry_date:
        type: "string"
      stock_type:
        type: "integer"
        format: "int64" 
      facility_code:
        type: "integer"
        format: "int64" 
      balance:
        type: "integer"
        format: "int64" 
      last_update:
        type: "string"
        
  Store:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      type:
        type: "string"
      facility_id:
        type: "integer"
        format: "int64"
  AccessLevel:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
  PatientPepReason:
    type: "object"
    properties:
      patient_id:
        type: "integer"
        format: "int32"
      pep_reasonid:
        $ref: "#/definitions/PepReason"
  PatientStatus:
    type: "object"
    properties:
      patient_id:
        type: "integer"
        format: "int32"
      status_id:
        $ref: "#/definitions/Status"
      change_date:
        type: "string"
        format: "date"
  illness:
    type: "object"
  Dispense:
    type: "object"
    required:
    - "current_height"
    properties:
      current_height:
        type: "integer"
        format: "int32"
      current_weight:
        type: "number"
        format: "float"
      items:
        type: "number"
        format: "float"
      visit_date:
        type: "string"
      appointment_adherence:
        type: "number"
        format: "float"
      is_active:
        type: "integer"
        format: "int32"
      patient_id:
        type: "integer"
        format: "int32"
      facility_id:
        type: "integer"
        format: "int32"
      user_id:
        type: "integer"
        format: "int32"
      purpose_id:
        type: "integer"
        format: "int32"
      last_regimen_id:
        type: "integer"
        format: "int32"
      current_regimen_id:
        type: "integer"
        format: "int32"
      change_reason_id:
        type: "integer"
        format: "int32"
      non_adherence_reason_id:
        type: "integer"
        format: "int32"
      appointment_id:
        type: "integer"
        format: "int32"    
  DispenseItems:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      duration:
        type: "integer"
        format: "int32"
      expected_pill_count:
        type: "integer"
        format: "int32"
      actual_pill_count:
        type: "integer"
        format: "int32"
      missed_pill_count:
        type: "integer"
        format: "int32"
      comment:
        type: "string"
      visit_id:
        type: "integer"
        format: "int32"
      stock_id:
        type: "integer"
        format: "int32"
      dose_id:
        type: "integer"
        format: "int32"
      indication_id:
        type: "integer"
        format: "int32"
  Indication:
    type: "object"
    properties:
      indication_id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      code:
        type: "string"
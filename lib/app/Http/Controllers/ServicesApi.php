<?php

/**
 * ADT API
 * Official & Core API for ADT  [ADT](http://adtcore.io)  Main API 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class ServicesApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation servicesGet
     *
     * fetches a list of services at a facility.
     *
     *
     * @return Http response
     */
    public function servicesGet()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $limit = $input['limit'];


        return response('How about implementing servicesGet as a GET method ?');
    }
    /**
     * Operation servicesPost
     *
     * Add a new service to the facility.
     *
     *
     * @return Http response
     */
    public function servicesPost()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $body = $input['body'];


        return response('How about implementing servicesPost as a POST method ?');
    }
    /**
     * Operation servicesServiceIdDelete
     *
     * Deletes the service at facility specified by the ID.
     *
     * @param int $service_id Particular Service at facility specified by the ID (required)
     *
     * @return Http response
     */
    public function servicesServiceIdDelete($service_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing servicesServiceIdDelete as a DELETE method ?');
    }
    /**
     * Operation servicesServiceIdGet
     *
     * Find service by serviceId.
     *
     * @param int $service_id Particular Service at facility specified by the ID (required)
     *
     * @return Http response
     */
    public function servicesByIdGet($service_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing servicesServiceIdGet as a GET method ?');
    }
    /**
     * Operation servicesServiceIdPut
     *
     * Update an existing service at facility specified by the ID.
     *
     * @param int $service_id Particular Service at facility specified by the ID (required)
     *
     * @return Http response
     */
    public function servicesPut($service_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing servicesServiceIdPut as a PUT method ?');
    }
    /**
     * Operation servicesServiceIdProphylaxisGet
     *
     * Fetch Prophylaxis for a service.
     *
     * @param int $service_id ID of service that needs to be fetched (required)
     *
     * @return Http response
     */
    public function servicesProphylaxisGet($service_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing servicesServiceIdProphylaxisGet as a GET method ?');
    }
    /**
     * Operation servicesServiceIdProphylaxisPost
     *
     * add Prophylaxis to service  specified by serviceId.
     *
     * @param int $service_id ID of service that needs to be fetched (required)
     *
     * @return Http response
     */
    public function servicesProphylaxisPost($service_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing servicesServiceIdProphylaxisPost as a POST method ?');
    }
    /**
     * Operation servicesServiceIdProphylaxisProphylaxisIdDelete
     *
     * Deletes the Prophylaxis specified by prophylaxisId.
     *
     * @param int $service_id ID of service that needs to be fetched (required)
     * @param string $prophylaxis_id  (required)
     *
     * @return Http response
     */
    public function servicesProphylaxisDelete($service_id, $prophylaxis_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing servicesServiceIdProphylaxisProphylaxisIdDelete as a DELETE method ?');
    }
    /**
     * Operation servicesServiceIdProphylaxisProphylaxisIdGet
     *
     * Fetch Prophylaxis for a service.
     *
     * @param int $service_id ID of service that needs to be fetched (required)
     * @param string $prophylaxis_id  (required)
     *
     * @return Http response
     */
    public function servicesProphylaxisGet($service_id, $prophylaxis_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing servicesServiceIdProphylaxisProphylaxisIdGet as a GET method ?');
    }
    /**
     * Operation servicesServiceIdProphylaxisProphylaxisIdPut
     *
     * Update the Prophylaxis specified by prophylaxisId.
     *
     * @param int $service_id ID of service that needs to be fetched (required)
     * @param string $prophylaxis_id  (required)
     *
     * @return Http response
     */
    public function servicesProphylaxisPut($service_id, $prophylaxis_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing servicesServiceIdProphylaxisProphylaxisIdPut as a PUT method ?');
    }
    /**
     * Operation servicesServiceIdRegimensGet
     *
     * Find service by serviceId.
     *
     * @param int $service_id ID of service that needs to be fetched (required)
     *
     * @return Http response
     */
    public function servicesRegimensGet($service_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing servicesServiceIdRegimensGet as a GET method ?');
    }
    /**
     * Operation servicesServiceIdRegimensPost
     *
     * Add a regimen for a particular service with serviceId.
     *
     * @param int $service_id ID of service that needs to be fetched (required)
     *
     * @return Http response
     */
    public function servicesRegimensPost($service_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing servicesServiceIdRegimensPost as a POST method ?');
    }
    /**
     * Operation servicesServiceIdRegimensRegimenIdDelete
     *
     * Deletes a Particular Regimen {regimenId} available for a particular service with serviceId.
     *
     * @param int $service_id ID of service that needs to be fetched (required)
     * @param int $regimen_id ID of service that needs to be fetched (required)
     *
     * @return Http response
     */
    public function servicesRegimensDelete($service_id, $regimen_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing servicesServiceIdRegimensRegimenIdDelete as a DELETE method ?');
    }
    /**
     * Operation servicesServiceIdRegimensRegimenIdGet
     *
     * Find service by serviceId.
     *
     * @param int $service_id ID of service that needs to be fetched (required)
     * @param int $regimen_id ID of service that needs to be fetched (required)
     *
     * @return Http response
     */
    public function servicesRegimensGet($service_id, $regimen_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing servicesServiceIdRegimensRegimenIdGet as a GET method ?');
    }
    /**
     * Operation servicesServiceIdRegimensRegimenIdPut
     *
     * Update a Regimen {regimenId} available for a particular service with serviceId.
     *
     * @param int $service_id ID of service that needs to be fetched (required)
     * @param int $regimen_id ID of service that needs to be fetched (required)
     *
     * @return Http response
     */
    public function servicesRegimensPut($service_id, $regimen_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing servicesServiceIdRegimensRegimenIdPut as a PUT method ?');
    }
}

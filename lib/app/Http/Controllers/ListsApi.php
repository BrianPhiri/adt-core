<?php

/**
 * ADT API
 * Official & Core API for ADT  [ADT](http://adtcore.io)  Main API 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

use App\Models\ListsModels\Allergies; 
use App\Models\ListsModels\Appointmet;
use App\Models\ListsModels\Category;
use App\Models\ListsModels\County;
use App\Models\ListsModels\Dependanat; 
use App\Models\ListsModels\Prophylaxis; 
use App\Models\ListsModels\Regimen; 
use App\Models\ListsModels\WhoStage; 
use App\Models\ListsModels\Illnesses; 
use App\Models\ListsModels\Sources; 
use App\Models\ListsModels\Pepreason; 
use App\Models\ListsModels\Familyplanning;
use App\Models\ListsModels\Services;
use App\Models\ListsModels\Sub_county;

class ListsApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    // ///////////////////////
    // Allergies            //
    // //////////////////////


    /**
     * Operation listsAllergiesGet
     *
     * Fetch Regimen allergies (for select options).
     *
     *
     * @return Http response
     */
    public function listsAllergiesGet()
    {
        $response = Allergies::all(); 
         return response()->json($response, 200); 
    }

    /**
     * Operation listsAllergiesAllergyIdGet
     *
     * Fetch Allergy specified by allergyId.
     *
     * @param int $allergy_id ID of allergy (required)
     *
     * @return Http response
     */
    public function listsAllergiesIdGet($allergy_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsAllergiesAllergyIdGet as a GET method ?');
    }
    /**
     * Operation listsAllergiesPost
     *
     * create a Category.
     *
     *
     * @return Http response
     */
    public function listsAllergiesPost()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $name = $input['name'];


        return response('How about implementing listsAllergiesPost as a POST method ?');
    }
    /**
     * Operation listsAllergiesAllergyIdPut
     *
     * Update an existing Category.
     *
     * @param int $allergy_id ID of allergy (required)
     *
     * @return Http response
     */
    public function listsAllergiesPut($allergy_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsAllergiesAllergyIdPut as a PUT method ?');
    }

    /**
     * Operation listsAllergiesAllergyIdDelete
     *
     * Deletes a Allergy specified by serviceId.
     *
     * @param int $allergy_id ID of allergy (required)
     *
     * @return Http response
     */
    public function listsAllergiesDelete($allergy_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsAllergiesAllergyIdDelete as a DELETE method ?');
    }

    // ///////////////////////
    // Categories          //
    // //////////////////////

    /**
     * Operation listsCategoriesGet
     *
     * Fetch Regimen Categories (for select options).
     *
     *
     * @return Http response
     */
    public function listsCategoriesGet()
    {
        $response = Category::all();
        return response()->json($response, 200);
    }
    /**
     * Operation listsCategoriesCategoryIdGet
     *
     * Fetch Category specified by categoryId.
     *
     * @param int $category_id ID of Service that needs to be fetched (required)
     *
     * @return Http response
     */
    public function listsCategoriesIdGet($category_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsCategoriesCategoryIdGet as a GET method ?');
    }
    /**
     * Operation listsCategoriesPost
     *
     * create a Category.
     *
     *
     * @return Http response
     */
    public function listsCategoriesPost()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $name = $input['name'];


        return response('How about implementing listsCategoriesPost as a POST method ?');
    }
    /**
     * Operation listsCategoriesCategoryIdPut
     *
     * Update an existing Category.
     *
     * @param int $category_id ID of Service that needs to be fetched (required)
     *
     * @return Http response
     */
    public function listsCategoriesPut($category_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsCategoriesCategoryIdPut as a PUT method ?');
    }
    /**
     * Operation listsCategoriesCategoryIdDelete
     *
     * Deletes a Category specified by serviceId.
     *
     * @param int $category_id ID of Service that needs to be fetched (required)
     *
     * @return Http response
     */
    public function listsCategoriesDelete($category_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsCategoriesCategoryIdDelete as a DELETE method ?');
    }

    // ///////////////////////
    // Counties            //
    // //////////////////////
    /**
     * Operation listsCountiesGet
     *
     * Fetch counties (for select options).
     *
     *
     * @return Http response
     */
    public function listsCountiesGet()
    {
        $response = County::all();
        return response()->json($response, 200);
    }
    /**
     * Operation listsCountiesCountyIdGet
     *
     * Fetch County specified by countyId.
     *
     * @param int $county_id ID of county that needs to be fetched (required)
     *
     * @return Http response
     */
    public function listsCountiesByIdGet($county_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsCountiesCountyIdGet as a GET method ?');
    }
    /**
     * Operation listsCountiesPost
     *
     * create a Category.
     *
     *
     * @return Http response
     */
    public function listsCountiesPost()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $name = $input['name'];


        return response('How about implementing listsCountiesPost as a POST method ?');
    }

    /**
     * Operation listsCountiesCountyIdPut
     *
     * Update an existing County.
     *
     * @param int $county_id ID of county that needs to be fetched (required)
     *
     * @return Http response
     */
    public function listsCountiesPut($county_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsCountiesCountyIdPut as a PUT method ?');
    }
    /**
     * Operation listsCountiesCountyIdDelete
     *
     * Deletes a County specified by countyId.
     *
     * @param int $county_id ID of county that needs to be fetched (required)
     *
     * @return Http response
     */
    public function listsCountiesDelete($county_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsCountiesCountyIdDelete as a DELETE method ?');
    }

    // ///////////////////////
    //CountiesSubcounties  //
    // //////////////////////
    /**
     * Operation listsCountiesCountyIdSubcountiesGet
     *
     * Fetch counties (for select options).
     *
     * @param int $county_id ID of County that needs to be fetched (required)
     *
     * @return Http response
     */
    public function listsCountiesSubcountiesGet($county_id)
    {
        $response = Sub_county::all();
        return response()->json($response, 200);
    }
    /**
     * Operation listsCountiesCountyIdSubcountiesSubcountyIdGet
     *
     * Fetch County specified by countyId.
     *
     * @param int $county_id ID of county (required)
     * @param int $subcounty_id ID of subcounty (required)
     *
     * @return Http response
     */
    public function listsCountiesSubcountiesByIdGet($county_id, $subcounty_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsCountiesCountyIdSubcountiesSubcountyIdGet as a GET method ?');
    }

    /**
     * Operation listsCountiesCountyIdSubcountiesPost
     *
     * create a Category.
     *
     * @param int $county_id ID of County that needs to be fetched (required)
     *
     * @return Http response
     */
    public function listsCountiesSubcountiesPost($county_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsCountiesCountyIdSubcountiesPost as a POST method ?');
    }
    /**
     * Operation listsCountiesCountyIdSubcountiesSubcountyIdPut
     *
     * Update an existing SubCounty for a county (countyId).
     *
     * @param int $county_id ID of county (required)
     * @param int $subcounty_id ID of subcounty (required)
     *
     * @return Http response
     */
    public function listsCountiesSubcountiesPut($county_id, $subcounty_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsCountiesCountyIdSubcountiesSubcountyIdPut as a PUT method ?');
    }
    /**
     * Operation listsCountiesCountyIdSubcountiesSubcountyIdDelete
     *
     * Deletes a SubCounty specified by subcountyId in a County specified by countyId.
     *
     * @param int $county_id ID of county (required)
     * @param int $subcounty_id ID of subcounty (required)
     *
     * @return Http response
     */
    public function listsCountiesSubcountiesDelete($county_id, $subcounty_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsCountiesCountyIdSubcountiesSubcountyIdDelete as a DELETE method ?');
    }

    // ///////////////////////
    //Family planning      //
    // //////////////////////

    /**
     * Operation listslGet
     *
     * Fetch list of Family Planning (for select options).
     *
     *
     * @return Http response
     */
    public function listsFamilyplanningGet()
    {
        $response = Familyplanning::all();
        return response()->json($response, 200);
    }
    /**
     * Operation listsFamilyplanningFamilyplanningIdGet
     *
     * Fetch a FamilyPlanning item specified by familyplanningId.
     *
     * @param int $familyplanning_id ID of FamilyPlanning item (required)
     *
     * @return Http response
     */
    public function listsFamilyplanningByIdGet($familyplanning_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsFamilyplanningFamilyplanningIdGet as a GET method ?');
    }
    /**
     * Operation listsFamilyplanningPost
     *
     * create a FamilyPlanning item.
     *
     *
     * @return Http response
     */
    public function listsFamilyplanningPost()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $name = $input['name'];


        return response('How about implementing listsFamilyplanningPost as a POST method ?');
    }
    /**
     * Operation listsFamilyplanningFamilyplanningIdPut
     *
     * Update an existing FamilyPlanning item.
     *
     * @param int $familyplanning_id ID of FamilyPlanning item (required)
     *
     * @return Http response
     */
    public function listsFamilyplanningPut($familyplanning_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsFamilyplanningFamilyplanningIdPut as a PUT method ?');
    }
    /**
     * Operation listsFamilyplanningFamilyplanningIdDelete
     *
     * Deletes a FamilyPlanning item specified by familyplanningId.
     *
     * @param int $familyplanning_id ID of FamilyPlanning item (required)
     *
     * @return Http response
     */
    public function listsFamilyplanningDelete($familyplanning_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsFamilyplanningFamilyplanningIdDelete as a DELETE method ?');
    }


    // ///////////////////////
    //  Illnesses           //
    // //////////////////////

    /**
     * Operation listsIllnessesGet
     *
     * Fetch list of Illnessess(for select options).
     *
     *
     * @return Http response
     */
    public function listsIllnessesGet()
    {
        $response = Illnesses::all();
        return response()->json($response, 200);
    }
    /**
     * Operation listsIllnessesIllnessIdGet
     *
     * Fetch a Illness specified by illnessId.
     *
     * @param int $illness_id ID of FamilyPlanning item (required)
     *
     * @return Http response
     */
    public function listsIllnessesByIdGet($illness_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsIllnessesIllnessIdGet as a GET method ?');
    }
    /**
     * Operation listsIllnessesPost
     *
     * Add an illness.
     *
     *
     * @return Http response
     */
    public function listsIllnessesPost()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $body = $input['body'];


        return response('How about implementing listsIllnessesPost as a POST method ?');
    }
    /**
     * Operation listsIllnessesIllnessIdPut
     *
     * Update an existing Illness specified by illnessId.
     *
     * @param int $illness_id ID of FamilyPlanning item (required)
     *
     * @return Http response
     */
    public function listsIllnessesPut($illness_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsIllnessesIllnessIdPut as a PUT method ?');
    }
    /**
     * Operation listsIllnessesIllnessIdDelete
     *
     * Deletes a FamilyPlanning item specified by familyplanningId.
     *
     * @param int $illness_id ID of FamilyPlanning item (required)
     *
     * @return Http response
     */
    public function listsIllnessesDelete($illness_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsIllnessesIllnessIdDelete as a DELETE method ?');
    }


    // ///////////////////////
    // Services            //
    // //////////////////////

    /**
     * Operation listsServicesGet
     *
     * Fetch Drug Allergies  (for select options).
     *
     *
     * @return Http response
     */
    public function listsServicesGet()
    {
        $response = Services::with('regimen')->get();
        return response()->json($response,200);
    }
    /**
     * Operation listsServicesServiceIdGet
     *
     * Fetch Service specified by serviceId.
     *
     * @param int $service_id ID of Service that needs to be fetched (required)
     *
     * @return Http response
     */
    public function listsServicesByIdGet($service_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsServicesServiceIdGet as a GET method ?');
    }
    /**
     * Operation listsServicesPost
     *
     * create a service.
     *
     *
     * @return Http response
     */
    public function listsServicesPost()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $name = $input['name'];


        return response('How about implementing listsServicesPost as a POST method ?');
    }
    /**
     * Operation listsServicesServiceIdPut
     *
     * Update an existing Service.
     *
     * @param int $service_id ID of Service that needs to be fetched (required)
     *
     * @return Http response
     */
    public function listsServicesServiceIdPut($service_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsServicesServiceIdPut as a PUT method ?');
    }
    /**
     * Operation listsServicesServiceIdDelete
     *
     * Deletes a service specified by serviceId.
     *
     * @param int $service_id ID of Service that needs to be fetched (required)
     *
     * @return Http response
     */
    public function listsServicesDelete($service_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listsServicesServiceIdDelete as a DELETE method ?');
    }


    // ///////////////////////
    // Temp functions      //
    // //////////////////////
    public function prophylaxis()
    {
        $response = Prophylaxis::all();
        return response()->json($response, 200);
    }
    public function pep()
    {
       $response = Pepreason::all();
       return response()->json($response, 200);
    }
    public function whoStage()
    {
        $response = WhoStage::all();
        return response()->json($response, 200);
    }
    public function patientSources()
    {
        $response = Sources::all();
        return response()->json($response, 200);
    }
}
